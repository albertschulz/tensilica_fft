table SINWAVE 16 512 {
      0,    201,    402,    603,    804,   1005,   1206,   1406,
   1607,   1808,   2009,   2209,   2410,   2610,   2811,   3011,
   3211,   3411,   3611,   3811,   4011,   4210,   4409,   4608,
   4807,   5006,   5205,   5403,   5601,   5799,   5997,   6195,
   6392,   6589,   6786,   6982,   7179,   7375,   7571,   7766,
   7961,   8156,   8351,   8545,   8739,   8932,   9126,   9319,
   9511,   9703,   9895,  10087,  10278,  10469,  10659,  10849,
  11038,  11227,  11416,  11604,  11792,  11980,  12166,  12353,
  12539,  12724,  12909,  13094,  13278,  13462,  13645,  13827,
  14009,  14191,  14372,  14552,  14732,  14911,  15090,  15268,
  15446,  15623,  15799,  15975,  16150,  16325,  16499,  16672,
  16845,  17017,  17189,  17360,  17530,  17699,  17868,  18036,
  18204,  18371,  18537,  18702,  18867,  19031,  19194,  19357,
  19519,  19680,  19840,  20000,  20159,  20317,  20474,  20631,
  20787,  20942,  21096,  21249,  21402,  21554,  21705,  21855,
  22004,  22153,  22301,  22448,  22594,  22739,  22883,  23027,
  23169,  23311,  23452,  23592,  23731,  23869,  24006,  24143,
  24278,  24413,  24546,  24679,  24811,  24942,  25072,  25201,
  25329,  25456,  25582,  25707,  25831,  25954,  26077,  26198,
  26318,  26437,  26556,  26673,  26789,  26905,  27019,  27132,
  27244,  27355,  27466,  27575,  27683,  27790,  27896,  28001,
  28105,  28208,  28309,  28410,  28510,  28608,  28706,  28802,
  28897,  28992,  29085,  29177,  29268,  29358,  29446,  29534,
  29621,  29706,  29790,  29873,  29955,  30036,  30116,  30195,
  30272,  30349,  30424,  30498,  30571,  30643,  30713,  30783,
  30851,  30918,  30984,  31049,
  31113,  31175,  31236,  31297,
  31356,  31413,  31470,  31525,  31580,  31633,  31684,  31735,
  31785,  31833,  31880,  31926,  31970,  32014,  32056,  32097,
  32137,  32176,  32213,  32249,  32284,  32318,  32350,  32382,
  32412,  32441,  32468,  32495,  32520,  32544,  32567,  32588,
  32609,  32628,  32646,  32662,  32678,  32692,  32705,  32717,
  32727,  32736,  32744,  32751,  32757,  32761,  32764,  32766,
  32767,  32766,  32764,  32761,  32757,  32751,  32744,  32736,
  32727,  32717,  32705,  32692,  32678,  32662,  32646,  32628,
  32609,  32588,  32567,  32544,  32520,  32495,  32468,  32441,
  32412,  32382,  32350,  32318,  32284,  32249,  32213,  32176,
  32137,  32097,  32056,  32014,  31970,  31926,  31880,  31833,
  31785,  31735,  31684,  31633,  31580,  31525,  31470,  31413,
  31356,  31297,  31236,  31175,  31113,  31049,  30984,  30918,
  30851,  30783,  30713,  30643,  30571,  30498,  30424,  30349,
  30272,  30195,  30116,  30036,  29955,  29873,  29790,  29706,
  29621,  29534,  29446,  29358,  29268,  29177,  29085,  28992,
  28897,  28802,  28706,  28608,  28510,  28410,  28309,  28208,
  28105,  28001,  27896,  27790,  27683,  27575,  27466,  27355,
  27244,  27132,  27019,  26905,  26789,  26673,  26556,  26437,
  26318,  26198,  26077,  25954,  25831,  25707,  25582,  25456,
  25329,  25201,  25072,  24942,  24811,  24679,  24546,  24413,
  24278,  24143,  24006,  23869,  23731,  23592,  23452,  23311,
  23169,  23027,  22883,  22739,  22594,  22448,  22301,  22153,
  22004,  21855,  21705,  21554,  21402,  21249,  21096,  20942,
  20787,  20631,  20474,  20317,  20159,  20000,  19840,  19680,
  19519,  19357,  19194,  19031,  18867,  18702,  18537,  18371,
  18204,  18036,  17868,  17699,  17530,  17360,  17189,  17017,
  16845,  16672,  16499,  16325,  16150,  15975,  15799,  15623,
  15446,  15268,  15090,  14911,  14732,  14552,  14372,  14191,
  14009,  13827,  13645,  13462,  13278,  13094,  12909,  12724,
  12539,  12353,  12166,  11980,  11792,  11604,  11416,  11227,
  11038,  10849,  10659,  10469,  10278,  10087,   9895,   9703,
   9511,   9319,   9126,   8932,   8739,   8545,   8351,   8156,
   7961,   7766,   7571,   7375,   7179,   6982,   6786,   6589,
   6392,   6195,   5997,   5799,   5601,   5403,   5205,   5006,
   4807,   4608,   4409,   4210,   4011,   3811,   3611,   3411,
   3211,   3011,   2811,   2610,   2410,   2209,   2009,   1808,
   1607,   1406,   1206,   1005,    804,    603,    402,    201
}

//
// Register
//

regfile vec4x16 64 8 vrf
regfile vect8x16 128 8 v2rf

//
// Functions
//

function [63:0] get_even([127:0] vector8x16)
{
	wire [15:0] v0 = vector8x16[127:112];
	wire [15:0] v2 = vector8x16[95:80];
	wire [15:0] v4 = vector8x16[63:48];
	wire [15:0] v6 = vector8x16[31:16];
	
	assign get_even = {v0, v2, v4, v6};
}

function [63:0] get_odd([127:0] vector8x16)
{
	wire [15:0] v1 = vector8x16[111:96];
	wire [15:0] v3 = vector8x16[79:64];
	wire [15:0] v5 = vector8x16[47:32];
	wire [15:0] v7 = vector8x16[15:0];
	
	assign get_odd = {v1, v3, v5, v7};
}

function [15:0] get_sin_value ([9:0] idx)
{
	// correct_idx = idx - 512
	wire [9:0] correct_idx = TIEadd(idx, ~12'h200, 1'b1);
	
	wire [15:0] sinvalue = SINWAVE[correct_idx];
	
	wire [15:0] neg_sin_value = TIEadd(16'b0, ~sinvalue, 1'b1);
	
	assign get_sin_value = TIEmux(idx[9], SINWAVE[idx], neg_sin_value);
}

function [0:0] isNegative([15:0] value)
{
	assign isNegative = value[15:15];
}

function [0:0] greaterThan16383([15:0] value)
{
	assign greaterThan16383 = value[14:14];
}

// Returns the absolute value of the given value
function [15:0] abs([15:0] value)
{
	wire [15:0] negative_value = TIEadd(15'b0, ~value, 1'b1);
	assign abs = TIEmux(isNegative(value), value, negative_value);
}

//
// Operations
//

operation GET_SIN_VALUE {in AR idx, out AR sin_value} {}
{
	assign sin_value = get_sin_value(idx);
}

function [31:0] calc_twiddle_factor([31:0] j, [0:0] inverse, [0:0] shift)
{
	wire [9:0] idx = TIEadd(j, 256, 1'b0);
	wire [15:0]	wr = get_sin_value(idx);
	wire [15:0] wi = TIEadd(16'b0, ~get_sin_value(j[9:0]), 1'b1);
	
	wire [15:0] x = TIEmux(inverse, wi, TIEadd(16'b0, ~wi, 1'b1));
	
	wire [15:0] tw_r = TIEmux(shift, wr, {1{wr[15]}, wr[15:1]});
	wire [15:0] tw_i = TIEmux(shift, x, {1{x[15]}, x[15:1]});
	
	assign calc_twiddle_factor = {tw_r, tw_i};
}

operation FFT_CALC_TWIDDLE_FACTOR {in AR j, in BR inverse, in BR shift, out AR twiddle} {}
{
	assign twiddle = calc_twiddle_factor(j, inverse, shift);
}

operation FFT_CALC_TWIDDLE_FACTORx4 {in AR k, in BR inverse, in BR shift, out vect8x16 twiddle_vector} {}
{
	wire [31:0] j1 = 0;
	wire [31:0] j2 = 1 << k;
	wire [31:0] j3 = 2 << k;
	wire [31:0] j4 = 3 << k;

	wire [31:0] twiddle1 = calc_twiddle_factor(j1, inverse, shift);
	wire [31:0] twiddle2 = calc_twiddle_factor(j2, inverse, shift);
	wire [31:0] twiddle3 = calc_twiddle_factor(j3, inverse, shift);
	wire [31:0] twiddle4 = calc_twiddle_factor(j4, inverse, shift);
	
	assign twiddle_vector = {twiddle1, twiddle2, twiddle3, twiddle4};
}

state twiddle_vector_reg 128 128'b0 add_read_write

operation FFT_CALC_TWIDDLE_FACTORx4_TO_STATES {in AR k, in BR inverse, in BR shift} {out twiddle_vector_reg}
{
	wire [31:0] j1 = 0;
	wire [31:0] j2 = 1 << k;
	wire [31:0] j3 = 2 << k;
	wire [31:0] j4 = 3 << k;

	wire [31:0] twiddle1 = calc_twiddle_factor(j1, inverse, shift);
	wire [31:0] twiddle2 = calc_twiddle_factor(j2, inverse, shift);
	wire [31:0] twiddle3 = calc_twiddle_factor(j3, inverse, shift);
	wire [31:0] twiddle4 = calc_twiddle_factor(j4, inverse, shift);
	
	assign twiddle_vector_reg = {twiddle1, twiddle2, twiddle3, twiddle4};
}

operation FFT_REVERSE_BITS {in AR d, in AR size, out AR reversed_data} {}
{
    assign reversed_data = {
        TIEmux(size[3:0], 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, d[0]),
        TIEmux(size[3:0], 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, d[0], d[1]),
        TIEmux(size[3:0], 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, d[0], d[1], d[2]),
        TIEmux(size[3:0], 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, d[0], d[1], d[2], d[3]),
        TIEmux(size[3:0], 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, d[0], d[1], d[2], d[3], d[4]),
        TIEmux(size[3:0], 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, d[0], d[1], d[2], d[3], d[4], d[5]),
        TIEmux(size[3:0], 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, d[0], d[1], d[2], d[3], d[4], d[5], d[6]),
        TIEmux(size[3:0], 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, d[0], d[1], d[2], d[3], d[4], d[5], d[6], d[7]),
        TIEmux(size[3:0], 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, d[0], d[1], d[2], d[3], d[4], d[5], d[6], d[7], d[8]),
        TIEmux(size[3:0], 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, d[0], d[1], d[2], d[3], d[4], d[5], d[6], d[7], d[8], d[9]),
        TIEmux(size[3:0], 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, d[0], d[1], d[2], d[3], d[4], d[5], d[6], d[7], d[8], d[9], d[10]),
        TIEmux(size[3:0], 1'b0, 1'b0, 1'b0, 1'b0, d[0], d[1], d[2], d[3], d[4], d[5], d[6], d[7], d[8], d[9], d[10], d[11]),
        TIEmux(size[3:0], 1'b0, 1'b0, 1'b0, d[0], d[1], d[2], d[3], d[4], d[5], d[6], d[7], d[8], d[9], d[10], d[11], d[12]),
        TIEmux(size[3:0], 1'b0, 1'b0, d[0], d[1], d[2], d[3], d[4], d[5], d[6], d[7], d[8], d[9], d[10], d[11], d[12], d[13]),
        TIEmux(size[3:0], 1'b0, d[0], d[1], d[2], d[3], d[4], d[5], d[6], d[7], d[8], d[9], d[10], d[11], d[12], d[13], d[14])
    };
}

function [15:0] FixedSub ([15:0] a, [15:0] b)
{
	assign FixedSub = TIEadd(a, ~b, 1'b1);
}

function [15:0] FixedMul ([15:0] a, [15:0] b)
{
	wire [31:0] d = TIEmul(a, b, 1'b1);
	assign FixedMul = d[30:15];
}

function [15:0] real ([31:0] value)
{
	assign real = value[31:16];
}

function [15:0] imag ([31:0] value)
{
	assign imag = value[15:0];
}

function [63:0] calc_butterfly ([31:0] even, [31:0] odd, [31:0] twiddle, [0:0] shift)
{
	wire [15:0] wr 		= real(twiddle);
	wire [15:0] wi 		= imag(twiddle);
	wire [15:0] even_r	= TIEmux(shift, real(even), {1{even[31]}, even[31:17]});
	wire [15:0] even_i	= TIEmux(shift, imag(even), {1{even[15]}, even[15:1]});
	
	wire [15:0] odd_r_wr	= FixedMul(wr, real(odd));
	wire [15:0] odd_i_wi	= FixedMul(wi, imag(odd));
	wire [15:0] temp_r		= FixedSub(odd_r_wr, odd_i_wi);
	
	wire [15:0] odd_r_wi = FixedMul(real(odd), wi);
	wire [15:0] odd_i_wr = FixedMul(imag(odd), wr);
	wire [15:0] temp_i 	= TIEadd(odd_r_wi, odd_i_wr, 1'b0);
	
	wire [15:0] even_out_r = TIEadd( even_r, temp_r, 1'b0);
	wire [15:0] even_out_i = TIEadd( even_i, temp_i, 1'b0);
	wire [15:0] odd_out_r  = FixedSub(even_r, temp_r); 
	wire [15:0] odd_out_i  = FixedSub(even_i, temp_i); 
	
	wire [31:0] even_out 		= {even_out_r, even_out_i};
	wire [31:0] odd_out			= {odd_out_r, odd_out_i};
	
	assign calc_butterfly = {even_out, odd_out};
}

operation FFT_CALC_BUTTERFLY {in AR even, in AR odd, in AR twiddle, in BR shift, out vec4x16 even_odd_out} {}
{
	assign even_odd_out = calc_butterfly(even, odd, twiddle, shift);
}

operation FFT_CALC_2_BUTTERFLIES {in vec4x16 even, in vec4x16 odd, in AR tw, in BR shift, out vect8x16 even_odd_out} {}
{
	wire [31:0] even1 	= even[63:32];
	wire [31:0] even2 	= even[31:0];
	
	wire [31:0] odd1	= odd[63:32];
	wire [31:0] odd2	= odd[31:0];
	
	// result = {even, odd}
	wire [63:0] result1 = calc_butterfly(even1, odd1, tw, shift);
	wire [63:0] result2 = calc_butterfly(even2, odd2, tw, shift);
	
	assign even_odd_out = {result1, result2};
}

state BUTTERFLY_RESULTS 256 256'b0 add_read_write

function [256:0] calc_4_butterflies([63:0] qr, [63:0] qi, [63:0] fr, [63:0] fi, [127:0] tw_vec, [0:0] shift)
{
	wire [31:0] tw1 = tw_vec[127:96];
	wire [31:0] tw2 = tw_vec[95:64];
	wire [31:0] tw3 = tw_vec[63:32];
	wire [31:0] tw4 = tw_vec[31:0];
	
	wire [63:0] result1 = calc_butterfly({qr[63:48],qi[63:48]}, {fr[63:48],fi[63:48]}, tw1, shift);
	wire [63:0] result2 = calc_butterfly({qr[47:32],qi[47:32]}, {fr[47:32],fi[47:32]}, tw2, shift);
	wire [63:0] result3 = calc_butterfly({qr[31:16],qi[31:16]}, {fr[31:16],fi[31:16]}, tw3, shift);
	wire [63:0] result4 = calc_butterfly({qr[15:0 ],qi[15:0 ]}, {fr[15:0 ],fi[15:0 ]}, tw4, shift);
	
	assign calc_4_butterflies = {result1, result2, result3, result4};
}

operation FFT_CALC_4_BUTTERFLIES_FROM_STATES {in BR shift} {inout DataReal, inout DataImag, in twiddle_vector_reg}
{
	wire [63:0] even_r 	= get_even(DataReal);
	wire [63:0] even_i 	= get_even(DataImag);
	wire [63:0] odd_r 	= get_odd(DataReal);
	wire [63:0] odd_i 	= get_odd(DataImag);
	
	wire [31:0] twiddle = twiddle_vector_reg[127:96];
	
	wire [127:0] tw_vector = {twiddle, twiddle, twiddle, twiddle};
		
	wire [255:0] bf_results = calc_4_butterflies(even_r, even_i, odd_r, odd_i, tw_vector, shift);
	wire [127:0] imagValues 	= imagFrom256(bf_results);
	wire [127:0] realValues 	= realFrom256(bf_results);

	assign DataReal = reverse_shuffle8x16(realValues);
	assign DataImag = reverse_shuffle8x16(imagValues);
}

operation FFT_CALC_4_BUTTERFLIES_FROM_STATES_2 {in BR shift} {inout DataReal, inout DataImag, in twiddle_vector_reg}
{
	wire [63:0] even_r 	= get_even(DataReal);
	wire [63:0] even_i 	= get_even(DataImag);
	wire [63:0] odd_r 	= get_odd(DataReal);
	wire [63:0] odd_i 	= get_odd(DataImag);
	
	wire [63:0] twiddle = twiddle_vector_reg[127:64];
	
	wire [127:0] tw_vector = {twiddle[63:32], twiddle[63:32], twiddle[31:0], twiddle[31:0]};	
	
	wire [255:0] bf_results = calc_4_butterflies(even_r, even_i, odd_r, odd_i, tw_vector, shift);
	wire [127:0] imagValues 	= imagFrom256(bf_results);
	wire [127:0] realValues 	= realFrom256(bf_results);

	assign DataReal = reverse_shuffle8x16(realValues);
	assign DataImag = reverse_shuffle8x16(imagValues);
}

operation FFT_CALC_4_BUTTERFLIES_FROM_STATES_4_WITH_TWIDDLE {in AR twiddle, in BR shift} {inout DataReal, inout DataImag}
{
	wire [63:0] even_r 	= get_even(DataReal);
	wire [63:0] even_i 	= get_even(DataImag);
	wire [63:0] odd_r 	= get_odd(DataReal);
	wire [63:0] odd_i 	= get_odd(DataImag);
	
	wire [127:0] tw_vector = {twiddle, twiddle, twiddle, twiddle};	
		
	wire [255:0] bf_results = calc_4_butterflies(even_r, even_i, odd_r, odd_i, tw_vector, shift);

	assign DataReal = realFrom256(bf_results);
	assign DataImag = imagFrom256(bf_results);
}

operation FFT_CALC_4_BUTTERFLIES_FROM_STATES_4 {in BR shift} {in DataReal, in DataImag, out BUTTERFLY_RESULTS, in twiddle_vector_reg}
{
	wire [63:0] even_r 	= get_even(DataReal);
	wire [63:0] even_i 	= get_even(DataImag);
	wire [63:0] odd_r 	= get_odd(DataReal);
	wire [63:0] odd_i 	= get_odd(DataImag);
		
	assign BUTTERFLY_RESULTS = calc_4_butterflies(even_r, even_i, odd_r, odd_i, twiddle_vector_reg, shift);
}

schedule FFT_CALC_BUTTERFLY_sched {FFT_CALC_BUTTERFLY} 
{
	def even_odd_out 2;
}

// Get all real values from 256 bit vectors (even, odd, even, odd, ...)
function [127:0] realFrom256([255:0] vector)
{
	wire [63:0] result1 = vector[255:192];
	wire [63:0] result2 = vector[191:128];
	wire [63:0] result3 = vector[127:64];
	wire [63:0] result4 = vector[63 :0];
	
	wire [15:0] result1_even_real 	= result1[63:48];
	wire [15:0] result1_odd_real	= result1[31:16];
	
	wire [15:0] result2_even_real 	= result2[63:48];
	wire [15:0] result2_odd_real	= result2[31:16];
	
	wire [15:0] result3_even_real 	= result3[63:48];
	wire [15:0] result3_odd_real	= result3[31:16];
	
	wire [15:0] result4_even_real 	= result4[63:48];
	wire [15:0] result4_odd_real	= result4[31:16];
	
	// ! Always be careful when reading/writing to memory, it is in reverse order
	assign realFrom256 = 		{	
									result1_even_real, result1_odd_real,
									result2_even_real, result2_odd_real,
									result3_even_real, result3_odd_real,
									result4_even_real, result4_odd_real
								};
}

// Get all imag values from 256 bit vectors (even, odd, even, odd, ...)
function [127:0] imagFrom256([255:0] vector)
{
	// result = {even, odd}
	wire [63:0] result1 = vector[255:192];
	wire [63:0] result2 = vector[191:128];
	wire [63:0] result3 = vector[127:64];
	wire [63:0] result4 = vector[63 :0];
	
	wire [15:0] result1_even_imag 	= result1[47:32];
	wire [15:0] result1_odd_imag	= result1[15:0];
	
	wire [15:0] result2_even_imag 	= result2[47:32];
	wire [15:0] result2_odd_imag	= result2[15:0];
	
	wire [15:0] result3_even_imag 	= result3[47:32];
	wire [15:0] result3_odd_imag	= result3[15:0];
	
	wire [15:0] result4_even_imag 	= result4[47:32];
	wire [15:0] result4_odd_imag	= result4[15:0];
	
	// ! Always be careful when reading/writing to memory, it is in reverse order
	assign imagFrom256 = {	
									result1_even_imag, result1_odd_imag,
									result2_even_imag, result2_odd_imag,
									result3_even_imag, result3_odd_imag,
									result4_even_imag, result4_odd_imag
								};
}

state DataReal 128 128'b0 add_read_write
state DataImag 128 128'b0 add_read_write

operation FFT_SIMD_LOAD_REAL {in AR *addr, in AR offset}{out VAddr, in MemDataIn128, out DataReal}
{
	assign VAddr =  addr + {offset[30:0], 1'b0};
	assign DataReal = reverse_2_byte_wise(MemDataIn128);
}

operation FFT_SIMD_LOAD_IMAG {in AR *addr, in AR offset}{out VAddr, in MemDataIn128, out DataImag}
{
	assign VAddr =  addr + {offset[30:0], 1'b0};
	assign DataImag = reverse_2_byte_wise(MemDataIn128);
}

format flix64 64 {slot_0, slot_1, slot_2}
slot_opcodes slot_0 {STORE_FROM_REAL_REG, LOAD_INTO_REAL_REG,LOAD_INTO_IMAG_REG, FFT_CALC_TWIDDLE_FACTORx4, FFT_CALC_BUTTERFLY, st.vec4x16, FFT_CALC_TWIDDLE_FACTORx4, L32I, L16SI, S16I, FFT_SIMD_LOAD, FFT_SIMD_LOAD_REAL, FFT_SIMD_LOAD_IMAG, FFT_SIMD_SHUFFLE_LOAD_REAL, FFT_SIMD_SHUFFLE_LOAD_IMAG, FFT_SIMD_SHUFFLE_STORE_REAL, FFT_SIMD_SHUFFLE_STORE_IMAG}
slot_opcodes slot_1 {FFT_CALC_TWIDDLE_FACTORx4, ADD.N, ADDX2, FFT_CALC_BUTTERFLY}
slot_opcodes slot_2 {STORE_FROM_IMAG_REG, LOAD_INTO_REAL_REG,LOAD_INTO_IMAG_REG, FFT_CALC_TWIDDLE_FACTORx4, FFT_CALC_BUTTERFLY, st.vec4x16, FFT_CALC_TWIDDLE_FACTORx4, L32I, L16SI, S16I, FFT_SIMD_LOAD, FFT_SIMD_LOAD_REAL, FFT_SIMD_LOAD_IMAG, FFT_SIMD_SHUFFLE_LOAD_REAL, FFT_SIMD_SHUFFLE_LOAD_IMAG, FFT_SIMD_SHUFFLE_STORE_REAL, FFT_SIMD_SHUFFLE_STORE_IMAG}

// !!!
// Always be careful when reading/writing to memory, it is in reverse order
// Use this method for easy reversal
function [127:0] reverse_2_byte_wise ([127:0] data)
{
	wire [15:0] v1 = data[127:112];
	wire [15:0] v2 = data[111:96];
	wire [15:0] v3 = data[95:80];
	wire [15:0] v4 = data[79:64];
	wire [15:0] v5 = data[63:48];
	wire [15:0] v6 = data[47:32];
	wire [15:0] v7 = data[31:16];
	wire [15:0] v8 = data[15:0];
	
	assign reverse_2_byte_wise = {v8, v7, v6, v5, v4, v3, v2, v1};
}

function [127:0] reverse_shuffle8x16 ([127:0] vector8x16)
{
	wire [15:0] v1 = vector8x16[127:112];
	wire [15:0] v2 = vector8x16[111:96];
	wire [15:0] v3 = vector8x16[95:80];
	wire [15:0] v4 = vector8x16[79:64];
	wire [15:0] v5 = vector8x16[63:48];
	wire [15:0] v6 = vector8x16[47:32];
	wire [15:0] v7 = vector8x16[31:16];
	wire [15:0] v8 = vector8x16[15:0];
	
	assign reverse_shuffle8x16 = {v1, v3, v5, v7, v2, v4, v6, v8};
}

function [127:0] shuffle8x16 ([127:0] vector8x16)
{
	wire [15:0] v1 = vector8x16[127:112];
	wire [15:0] v2 = vector8x16[111:96];
	wire [15:0] v3 = vector8x16[95:80];
	wire [15:0] v4 = vector8x16[79:64];
	wire [15:0] v5 = vector8x16[63:48];
	wire [15:0] v6 = vector8x16[47:32];
	wire [15:0] v7 = vector8x16[31:16];
	wire [15:0] v8 = vector8x16[15:0];
	
	assign shuffle8x16 = {v1, v5, v2, v6, v3, v7, v4, v8};
}

operation FFT_SIMD_SHUFFLE_LOAD_REAL {in AR *addr, in AR offset, in BR reverse} {out VAddr, in MemDataIn128, out DataReal}
{
	assign VAddr =  addr + {offset[30:0], 1'b0};
	wire [127:0] reverseDataIn = reverse_2_byte_wise(MemDataIn128);
	assign DataReal = TIEmux(reverse, shuffle8x16(reverseDataIn), reverse_shuffle8x16(reverseDataIn));
}

operation FFT_SIMD_SHUFFLE_LOAD_IMAG {in AR *addr, in AR offset, in BR reverse} {out VAddr, in MemDataIn128, out DataImag}
{
	assign VAddr =  addr + {offset[30:0], 1'b0};
	wire [127:0] reverseDataIn = reverse_2_byte_wise(MemDataIn128);
	assign DataImag = TIEmux(reverse, shuffle8x16(reverseDataIn), reverse_shuffle8x16(reverseDataIn));
}

operation FFT_SIMD_SHUFFLE_STORE_REAL {in AR *addr, in AR offset, in BR reverse} {out VAddr, out MemDataOut128, in BUTTERFLY_RESULTS}
{
	assign VAddr 				= addr + {offset[30:0], 1'b0};
	wire [127:0] realValues 	= realFrom256(BUTTERFLY_RESULTS);
	wire [127:0] shuffledValues = TIEmux(reverse, shuffle8x16(realValues), reverse_shuffle8x16(realValues));
	assign MemDataOut128 		= reverse_2_byte_wise(shuffledValues);
}

operation FFT_SIMD_SHUFFLE_STORE_IMAG {in AR *addr, in AR offset, in BR reverse} {out VAddr, out MemDataOut128, in BUTTERFLY_RESULTS}
{
	assign VAddr 				= addr + {offset[30:0], 1'b0};
	wire [127:0] imagValues 	= imagFrom256(BUTTERFLY_RESULTS);
	wire [127:0] shuffledValues = TIEmux(reverse, shuffle8x16(imagValues), reverse_shuffle8x16(imagValues));
	assign MemDataOut128 		= reverse_2_byte_wise(shuffledValues);
}

operation FFT_SIMD_LOAD {in AR *addr, in AR offset, out vect8x16 output} {out VAddr, in MemDataIn128}
{
	assign VAddr = addr + {offset[30:0], 1'b0};
	assign output = reverse_2_byte_wise(MemDataIn128);
}

operation FFT_CHECK_SHIFT_CONDITION {in vect8x16 j_vector, in vect8x16 m_vector, out BR should_shift} {}
{
	wire [15:0] j1 = abs(j_vector[127:112]);
	wire [15:0] j2 = abs(j_vector[111:96 ]);
	wire [15:0] j3 = abs(j_vector[95 :80 ]);
	wire [15:0] j4 = abs(j_vector[79 :64 ]);
	wire [15:0] j5 = abs(j_vector[63 :48 ]);
	wire [15:0] j6 = abs(j_vector[47 :32 ]);
	wire [15:0] j7 = abs(j_vector[31 :16 ]);
	wire [15:0] j8 = abs(j_vector[15 :0  ]);
	
	wire [15:0] m1 = abs(m_vector[127:112]);
	wire [15:0] m2 = abs(m_vector[111:96 ]);
	wire [15:0] m3 = abs(m_vector[95 :80 ]);
	wire [15:0] m4 = abs(m_vector[79 :64 ]);
	wire [15:0] m5 = abs(m_vector[63 :48 ]);
	wire [15:0] m6 = abs(m_vector[47 :32 ]);
	wire [15:0] m7 = abs(m_vector[31 :16 ]);
	wire [15:0] m8 = abs(m_vector[15 :0  ]);
	
	assign should_shift = 		greaterThan16383(j1) 
							| 	greaterThan16383(j2) 
							| 	greaterThan16383(j3) 
							| 	greaterThan16383(j4) 
							| 	greaterThan16383(j5) 
							| 	greaterThan16383(j6) 
							| 	greaterThan16383(j7) 
							| 	greaterThan16383(j8) 
							| 	greaterThan16383(m1) 
							| 	greaterThan16383(m2) 
							| 	greaterThan16383(m3) 
							| 	greaterThan16383(m4) 
							| 	greaterThan16383(m5) 
							| 	greaterThan16383(m6) 
							| 	greaterThan16383(m7) 
							| 	greaterThan16383(m8);
}

operation CALC_I {in AR i_in, in AR l, out AR i_out} {}
{
	wire [31:0] shifted_l = {l[28:0], 3'b0};
	assign i_out = TIEadd(i_in, shifted_l, 1'b0);
}

state fr_i_addr 32 32'b0 add_read_write
state fi_i_addr 32 32'b0 add_read_write

operation SET_FR_FI_ADDR {in AR *addr_fr, in AR *addr_fi, in AR offset} {out fr_i_addr, out fi_i_addr}
{
	assign fr_i_addr = TIEadd(addr_fr, {offset[30:0], 1'b0}, 1'b0);
	assign fi_i_addr = TIEadd(addr_fi, {offset[30:0], 1'b0}, 1'b0);
}

immediate_range immediate 0 7 1

operation LOAD_INTO_REAL_REG {in immediate factor, in AR offset} {out VAddr, in MemDataIn16, inout DataReal, in fr_i_addr}
{
	wire [31:0]	factor_offset		= TIEmul(factor, offset, 1'b0);
	assign VAddr 		= TIEadd(fr_i_addr, {factor_offset[30:0], 1'b0}, 1'b0);
	assign DataReal = {DataReal[111:0], MemDataIn16};
}

operation LOAD_INTO_IMAG_REG {in immediate factor, in AR offset} {out VAddr, in MemDataIn16, inout DataImag, in fi_i_addr}
{
	wire [31:0]	factor_offset		= TIEmul(factor, offset, 1'b0);
	assign VAddr 		= TIEadd(fi_i_addr, {factor_offset[30:0], 1'b0}, 1'b0);
	assign DataImag = {DataImag[111:0], MemDataIn16};
}

operation STORE_FROM_REAL_REG {in immediate factor, in AR offset} {out VAddr, out MemDataOut16, inout DataReal, in fr_i_addr}
{
	wire [31:0]	factor_offset		= TIEmul(factor, offset, 1'b0);
	assign VAddr 		= TIEadd(fr_i_addr, {factor_offset[30:0], 1'b0}, 1'b0);
	assign MemDataOut16 = DataReal[127:112];
	assign DataReal		= {DataReal[111:0], 16'b0};
}

operation STORE_FROM_IMAG_REG {in immediate factor, in AR offset} {out VAddr, out MemDataOut16, inout DataImag, in fi_i_addr}
{
	wire [31:0]	factor_offset		= TIEmul(factor, offset, 1'b0);
	assign VAddr 		= TIEadd(fi_i_addr, {factor_offset[30:0], 1'b0}, 1'b0);
	assign MemDataOut16 = DataImag[127:112];
	assign DataImag		= {DataImag[111:0], 16'b0};
}
