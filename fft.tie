operation FFT_REVERSE_BITS {in AR d, in AR size, out AR reversed_data} {}
{
    assign reversed_data = {
        TIEmux(size[3:0], 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, d[0]),
        TIEmux(size[3:0], 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, d[0], d[1]),
        TIEmux(size[3:0], 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, d[0], d[1], d[2]),
        TIEmux(size[3:0], 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, d[0], d[1], d[2], d[3]),
        TIEmux(size[3:0], 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, d[0], d[1], d[2], d[3], d[4]),
        TIEmux(size[3:0], 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, d[0], d[1], d[2], d[3], d[4], d[5]),
        TIEmux(size[3:0], 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, d[0], d[1], d[2], d[3], d[4], d[5], d[6]),
        TIEmux(size[3:0], 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, d[0], d[1], d[2], d[3], d[4], d[5], d[6], d[7]),
        TIEmux(size[3:0], 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, d[0], d[1], d[2], d[3], d[4], d[5], d[6], d[7], d[8]),
        TIEmux(size[3:0], 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, d[0], d[1], d[2], d[3], d[4], d[5], d[6], d[7], d[8], d[9]),
        TIEmux(size[3:0], 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, d[0], d[1], d[2], d[3], d[4], d[5], d[6], d[7], d[8], d[9], d[10]),
        TIEmux(size[3:0], 1'b0, 1'b0, 1'b0, 1'b0, d[0], d[1], d[2], d[3], d[4], d[5], d[6], d[7], d[8], d[9], d[10], d[11]),
        TIEmux(size[3:0], 1'b0, 1'b0, 1'b0, d[0], d[1], d[2], d[3], d[4], d[5], d[6], d[7], d[8], d[9], d[10], d[11], d[12]),
        TIEmux(size[3:0], 1'b0, 1'b0, d[0], d[1], d[2], d[3], d[4], d[5], d[6], d[7], d[8], d[9], d[10], d[11], d[12], d[13]),
        TIEmux(size[3:0], 1'b0, d[0], d[1], d[2], d[3], d[4], d[5], d[6], d[7], d[8], d[9], d[10], d[11], d[12], d[13], d[14])
    };
}

function [15:0] FixedSub ([15:0] a, [15:0] b)
{
	assign FixedSub = TIEadd(a, ~b, 1'b1);
}

function [15:0] FixedMul ([15:0] a, [15:0] b)
{
	wire [31:0] d = TIEmul(a, b, 1'b1);
	assign FixedMul = d[30:15];
}

regfile VR 64 4 vrf

// Upper 16 Bits:Real Part; lower 16 Bits are the imag part
operation FFT_CALC_BUTTERFLY {in AR even, in AR odd, in AR twiddle, in BR shift, out VR odd_even_out} {}
{
	wire [15:0] wr 		= twiddle[31:16];
	wire [15:0] wi 		= twiddle[15:0];
	wire [15:0] fr_j 	= odd[31:16];
	wire [15:0] fi_j 	= odd[15:0];
	wire [15:0] qr		= TIEmux(shift, even[31:16], {1{even[31]}, even[31:17]});
	wire [15:0] qi		= TIEmux(shift, even[15:0], {1{even[15]}, even[15:1]});
	
	wire [15:0] oddr_wr = FixedMul(wr, fr_j);
	wire [15:0] oddi_wi = FixedMul(wi, fi_j);
	wire [15:0] tr 		= FixedSub(oddr_wr, oddi_wi);
	
	wire [15:0] oddr_wi = FixedMul(fr_j, wi);
	wire [15:0] oddi_wr = FixedMul(fi_j, wr);
	wire [15:0] ti 		= TIEadd(oddr_wi, oddi_wr, 1'b0);
	
	wire [15:0] a = TIEadd( qr, tr, 1'b0);
	wire [15:0] b = TIEadd( qi, ti, 1'b0);
	wire [15:0] c = FixedSub(qr, tr); 
	wire [15:0] d = FixedSub(qi, ti); 
	
	wire [31:0] even_out 		= {a, b};
	wire [31:0] odd_out			= {c, d};
	
	assign odd_even_out = {odd_out, even_out};
}

schedule FFT_CALC_BUTTERFLY_sched {FFT_CALC_BUTTERFLY} 
{
	def odd_even_out 2;
}